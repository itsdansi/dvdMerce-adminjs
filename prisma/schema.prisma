generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String?
  password String
  isAdmin Boolean @default(false)
  genres Genre[]
  movies Movie[]
  dvds     DVD[]
  ratings     Rating[]
  artists  Artist[]
  wishlists Wishlist[]
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Genre {
  id          Int      @id @default(autoincrement())
  title       String
   user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  movies     Movie[]
  deleted Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  plot        String?
  genre       Genre? @relation(fields: [genreId], references: [id])
  genreId Int?
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  imageUrl String?
  releaseDate DateTime?
  status   Boolean @default(true)
  dvds     DVD[]
  ratings  Rating[]
  artists  Artist[]
  deleted Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model DVD {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String?
  sku         Int
  length      String       // 2h45m
  size        String     // 1.9GB
  price       Float
  movie       Movie? @relation(fields: [movieId], references: [id])
  movieId Int?
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  wishlists Wishlist[]
  status   Boolean @default(true)
  deleted Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Rating {
  id          Int      @id @default(autoincrement())
  rating      Int
  movie       Movie? @relation(fields: [movieId], references: [id])
  movieId Int?
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Artist {
  id          Int      @id @default(autoincrement())
  name       String
  characterName        String?
  role         String //any input for now
  movie       Movie? @relation(fields: [movieId], references: [id])
  movieId Int?
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Wishlist {
  id          Int      @id @default(autoincrement())
  dvd         DVD?      @relation(fields: [dvdId], references: [id])
  dvdId       Int?
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}



