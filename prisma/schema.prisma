generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id    Int     @default(autoincrement()) @id
//   email String  @unique
//   name  String?
//   password String
//   isAdmin Boolean @default(false) @map("is_admin")
//   genres Genre[]
//   movies Movie[]
//   dvds     DVD[]
//   ratings     Rating[]
//   artists  Artist[]
//   wishlists Wishlist[]
//   movie_crews MovieCrew[]
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime? @map("updated_at")

//   @@map("users")

// }

// model Genre {
//   id          Int      @id @default(autoincrement())
//   title       String
//   user    User?    @relation(fields: [userId], references: [id])
//   userId  Int?      @map("user_id")
//   movies     Movie[]
//   deleted Boolean @default(false)
//   deletedAt DateTime? @map("deleted_at")
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime? @map("updated_at")

//   @@map("genres")

// }

// model Movie {
//   id          Int      @id @default(autoincrement())
//   title       String
//   plot        String?
//   genre       Genre? @relation(fields: [genreId], references: [id])
//   genreId Int?       @map("genre_id")
//   user    User?      @relation(fields: [userId], references: [id])
//   userId  Int?       @map("user_id")
//   imageUrl String?   @map("image_url")
//   releaseDate DateTime?   @map("release_date")
//   status   Boolean @default(true)
//   dvds     DVD[]
//   ratings  Rating[]
//   movie_crews  MovieCrew[]
//   deleted Boolean @default(false)
//   deletedAt DateTime? @map("deleted_at")
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime? @map("updated_at")

//    @@map("movies")

// }

// model DVD {
//   id          Int      @id @default(autoincrement())
//   title       String
//   desc        String?
//   sku         Int
//   length      String       // 2h45m
//   size        String     // 1.9GB
//   price       Float
//   movie       Movie? @relation(fields: [movieId], references: [id])
//   movieId Int?       @map("movie_id")
//   user    User?      @relation(fields: [userId], references: [id])
//   userId  Int?       @map("user_id")
//   wishlists Wishlist[]
//   status   Boolean   @default(true)
//   deleted Boolean    @default(false)
//   deletedAt DateTime? @map("deleted_at")
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime? @map("updated_at")

//    @@map("dvds")

// }

// model Rating {
//   id          Int      @id @default(autoincrement())
//   rating      Int
//   movie       Movie?   @relation(fields: [movieId], references: [id])
//   movieId Int?         @map("movie_id")
//   user    User?        @relation(fields: [userId], references: [id])
//   userId  Int?         @map("user_id")
//   createdAt DateTime   @default(now()) @map("created_at")
//   updatedAt DateTime?  @map("updated_at")

//    @@map("ratings")

// }

// model Wishlist {
//   id          Int      @id @default(autoincrement())
//   dvd         DVD?     @relation(fields: [dvdId], references: [id])
//   dvdId       Int?     @map("dev_id")
//   user    User?        @relation(fields: [userId], references: [id])
//   userId  Int?         @map("user_id")
//   createdAt DateTime   @default(now()) @map("created_at")
//   updatedAt DateTime?  @map("updated_at")

//    @@map("wishlists")

// }

// model Artist {
//     id          Int      @id @default(autoincrement())
//   firstName     String  @map("first_name")
//   lastName      String  @map("last_name")
//   awards    String?
//   dob       DateTime?
//   dod       DateTime?
//   user    User?    @relation(fields: [userId], references: [id])
//   userId  Int?     @map("user_id")
//   movie_crews MovieCrew[]
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime? @map("updated_at")

//   @@map("artists")
// }

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String?
  password String
  isAdmin Boolean @default(false)
  genres Genre[]
  movies Movie[]
  dvds     DVD[]
  ratings     Rating[]
  artists  Artist[]
  wishlists Wishlist[]
  movie_crews MovieCrew[]
  createdAt DateTime @default(now())
  updatedAt DateTime? 
}

model Genre {
  id          Int      @id @default(autoincrement())
  title       String
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?      
  movies     Movie[]
  deleted Boolean @default(false)
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime @default(now())
  updatedAt DateTime? 
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  plot        String?
  genre       Genre? @relation(fields: [genreId], references: [id])
  genreId Int?       
  user    User?      @relation(fields: [userId], references: [id])
  userId  Int?       
  imageUrl String?   
  releaseDate DateTime? 
  status   Boolean @default(true)
  dvds     DVD[]
  ratings  Rating[]
  movie_crews  MovieCrew[]
  deleted Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime? 
}

model DVD {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String?
  sku         Int
  length      String       // 2h45m
  size        String     // 1.9GB
  price       Float
  movie       Movie? @relation(fields: [movieId], references: [id])
  movieId Int?       
  user    User?      @relation(fields: [userId], references: [id])
  userId  Int?       
  wishlists Wishlist[]
  status   Boolean   @default(true)
  deleted Boolean    @default(false)
  deletedAt DateTime? 
  createdAt DateTime @default(now())
  updatedAt DateTime? 
}

model Rating {
  id          Int      @id @default(autoincrement())
  rating      Int
  movie       Movie?   @relation(fields: [movieId], references: [id])
  movieId Int?         
  user    User?        @relation(fields: [userId], references: [id])
  userId  Int?         
  createdAt DateTime   @default(now())
  updatedAt DateTime?  
}

model Wishlist {
  id          Int      @id @default(autoincrement())
  dvd         DVD?     @relation(fields: [dvdId], references: [id])
  dvdId       Int?     
  user    User?        @relation(fields: [userId], references: [id])
  userId  Int?         
  createdAt DateTime   @default(now())
  updatedAt DateTime?  
}

model Artist {
    id          Int      @id @default(autoincrement())
  firstName     String  @map("first_name")
  lastName      String  @map("last_name")
  awards    String?
  dob       DateTime?
  dod       DateTime?
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?     @map("user_id")
  movie_crews MovieCrew[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("artists")
}

model MovieCrew {
  id          Int      @id @default(autoincrement())
  role     String
  characterName      String? @map("character_name")
  artist    Artist?    @relation(fields: [artistId], references: [id])
  artistId  Int?    @map("artist_id")
  user    User?     @relation(fields: [userId], references: [id])
  userId  Int?      @map("user_id")
  movie    Movie?   @relation(fields: [movieId], references: [id])
  movieId  Int?     @map("movie_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("movie_crews")

}